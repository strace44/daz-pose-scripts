// DAZ Studio version 4.12.0.86 filetype DAZ Script

// Nodes to simply lock bend, twist, and side-to-side
var torso_nodes = [
	"chestUpper",
	"chestLower",
	"abdomenUpper"
];
var pectoral_node_name = "Pectoral"
var head_nodes = [
	"head",
	"neckUpper",
	"neckLower"
];

var thumb_node_names = [
	"Thumb3",
	"Thumb2",
	"Thumb1"
];
var collar_node_name = "Collar"
var arm_node_names = [
	"Hand",
	"ForearmTwist",
	"ForearmBend",
	"ShldrTwist",
	"ShldrBend",
	"Collar"
];
var left_right = [
	"l",
	"r"
];
var pose_control_prefix = ["pCTRL"];
var hand_pose_properties = [
	"ThumbInOut",
	"ThumbGrasp",
	"ThumbFist",
	"ThumbBend",
	"HandSpread",
	"HandGrasp",
	"HandFist",
	"HandChop"
];

var toe_node_name = "Toe";
var ankle_node_names = [
	"Metatarsals",
	"Foot"
];
var knee_node_names = [
	"Shin"
];
var foot_pose_properties = [
	"FootTwist",
	"FootTipToes",
	"FootRoll",
	"FootHeeledShoe"
];
// Not worth generalizing the naming
var extra_foot_pose_props = [
	"pCTR_FootR_SexyHeelsFD",
	"pCTR_FootL_SexyHeelsFD"
]

function get_selected_root_nodes() {
	// For multiple characters to lock
	var root_nodes = [];

	var selected_nodes = Scene.getSelectedNodeList();
	for (var i = 0; i < selected_nodes.length; i++) {
		var selected_node = selected_nodes[i];
		while (!selected_node.isRootNode()) {
			//print(selected_node.name);
			selected_node = selected_node.getNodeParent();
		}
		root_nodes.push(selected_node);
	}
	return root_nodes;
}

function product(sequence_of_sequences) {
    if (sequence_of_sequences.length == 0) {
        return [];
    } else if (sequence_of_sequences.length == 1) {
        return sequence_of_sequences[0];
    } else {
        var product_rest = product(sequence_of_sequences.slice(1));
        var joined = [];
        for (var i = 0; i < sequence_of_sequences[0].length; i++) {
            for (var j = 0; j < product_rest.length; j++) {
                var subseq = [sequence_of_sequences[0][i]];
                subseq = subseq.concat(product_rest[j]);
                joined.push(subseq);
            }
        }
        return joined;
    }
}

function string_product(sequence_of_sequences) {
	var product_results = product(sequence_of_sequences);
	return product_results.map(function(l) {return l.join("")});
}

var lr_collar_node_names = string_product([left_right, [collar_node_name]]);
var lr_pectoral_node_names = string_product([left_right, [pectoral_node_name]]);
var lr_hand_pose_properties = string_product([pose_control_prefix, left_right, hand_pose_properties]);
var lr_thumb_node_names =  string_product([left_right, thumb_node_names]);
var lr_arm_node_names =  string_product([left_right, arm_node_names]);
var lr_foot_pose_properties = (
	string_product([pose_control_prefix, left_right, foot_pose_properties]) +
	extra_foot_pose_props
);

function lock_nodes(nodes, lock) {
	for (var j = 0; j < nodes.length; j++) {
		var node = nodes[j];
		if (node.getXRotControl()) {
			node.getXRotControl().lock(lock);
		}
		if (node.getYRotControl()) {
			node.getYRotControl().lock(lock);
		}
		if (node.getZRotControl()) {
			node.getZRotControl().lock(lock);
		}
		if (node.getXPosControl()) {
			node.getXPosControl().lock(lock);
		}
		if (node.getYPosControl()) {
			node.getYPosControl().lock(lock);
		}
		if (node.getZPosControl()) {
			node.getZPosControl().lock(lock);
		}
		if (node.getXScaleControl()) {
			node.getXScaleControl().lock(lock);
		}
		if (node.getYScaleControl()) {
			node.getYScaleControl().lock(lock);
		}
		if (node.getZScaleControl()) {
			node.getZScaleControl().lock(lock);
		}
	}
}

function lock_all_by_name(root_node, node_names, lock) {
	var nodes = node_names.map(
		function(name) {
			return root_node.findNodeChild(name, true);
		}
	)
	lock_nodes(nodes, lock);
}

function lock_all_by_name_recursive(root_node, start_node_names, lock) {
	var descendent_nodes = [];
	for (var j = 0; j < start_node_names.length; j++) {
		var name = start_node_names[j];
		var node = root_node.findNodeChild(name, true);
		descendent_nodes.push(node);
		var children = node.getNodeChildren(true);
		descendent_nodes = descendent_nodes.concat(children);
	}
	lock_nodes(descendent_nodes, lock);
}

function lock_toe_twist(root_node, node_names, lock) {
	for (var j = 0; j < node_names.length; j++) {
		var name = node_names[j];
		var node = root_node.findNodeChild(name, true);
		if (node.getZRotControl()) {
			node.getZRotControl().lock(lock);
		}
	}
}

function unlock_all(root_node) {
	var property_list = root_node.getPropertyList();
	for (var i = 0; i < property_list.length; i++) {
		var prop_obj = property_list[i];
		prop_obj.lock(false);
	}
	var children = root_node.getNodeChildren(true);
	for (var i = 0; i < children.length; i++)  {
		var node = children[i];
		if (node.getXRotControl()) {
			node.getXRotControl().lock(false);
		}
		if (node.getYRotControl()) {
			node.getYRotControl().lock(false);
		}
		if (node.getZRotControl()) {
			node.getZRotControl().lock(false);
		}
		if (node.getXPosControl()) {
			node.getXPosControl().lock(false);
		}
		if (node.getYPosControl()) {
			node.getYPosControl().lock(false);
		}
		if (node.getZPosControl()) {
			node.getZPosControl().lock(false);
		}
		if (node.getXScaleControl()) {
			node.getXScaleControl().lock(false);
		}
		if (node.getYScaleControl()) {
			node.getYScaleControl().lock(false);
		}
		if (node.getZScaleControl()) {
			node.getZScaleControl().lock(false);
		}
	}
}

function lock_all_pose(root_node, pose_prop_names, lock) {
	property_list = root_node.getPropertyList();
	for (var i = 0; i < property_list.length; i++) {
		var prop_obj = property_list[i];
		var prop_name = prop_obj.name;
		if (pose_prop_names.indexOf(prop_name) >= 0) {
			print("Found property", prop_name);
			prop_obj.lock(lock);
		}
	}
}

function report_results(root_nodes, success_message) {
	if (root_nodes.length > 0) {
		MessageBox.information(qsTr(success_message), qsTr("Pose Lock"), qsTr("&OK") );
	} else {
		MessageBox.critical(qsTr("At least one figure must be selected."), qsTr("Pose Lock"), qsTr("&OK") );
	}
}
