// DAZ Studio version 4.12.0.86 filetype DAZ Script

// Nodes to simply lock bend, twist, and side-to-side
var torso_nodes = [
	"chestUpper",
	"chestLower",
	"abdomenUpper"
];
var head_nodes = [
	"head",
	"neckUpper",
	"neckLower"
];

var arm_node_names = [
	"Thumb3",
	"Thumb2",
	"Thumb1",
	"Hand",
	"ForearmTwist",
	"ForearmBend",
	"ShldrTwist",
	"ShldrBend",
	"Collar"
];
var left_right = [
	"l",
	"r"
];
var pose_control_prefix = ["pCTRL"];
var hand_pose_properties = [
	"ThumbInOut",
	"ThumbGrasp",
	"ThumbFist",
	"ThumbBend",
	"HandSpread",
	"HandGrasp",
	"HandFist",
	"HandChop"
];

var toe_node_name = "Toe";
var ankle_node_names = [
	"Metatarsals",
	"Foot"
];
var knee_node_names = [
	"Shin"
];
var foot_pose_properties = [
	"FootTwist",
	"FootTipToes",
	"FootRoll",
	"FootHeeledShoe"
];
// Not worth generalizing the naming
var extra_foot_pose_props = [
	"pCTR_FootR_SexyHeelsFD",
	"pCTR_FootL_SexyHeelsFD"
]

function get_selected_root_nodes() {
	// For multiple characters to lock
	var root_nodes = [];

	var selected_nodes = Scene.getSelectedNodeList();
	for (var i = 0; i < selected_nodes.length; i++) {
		var selected_node = selected_nodes[i];
		while (!selected_node.isRootNode()) {
			//print(selected_node.name);
			selected_node = selected_node.getNodeParent();
		}
		root_nodes.push(selected_node);
	}
	return root_nodes;
}

function product2(labels_1, labels_2) {
	var joined = [];
	for (var i = 0; i < labels_1.length; i++) {
		for (var j = 0; j < labels_2.length; j++) {
			var pieces = [labels_1[i], labels_2[j]];
			joined.push(pieces.join(''));
		}
	}
	return joined;
}

function product3(labels_1, labels_2, labels_3) {
	var joined = [];
	for (var i = 0; i < labels_1.length; i++) {
		for (var j = 0; j < labels_2.length; j++) {
			for (var k = 0; k < labels_3.length; k++) {
				var pieces = [labels_1[i], labels_2[j], labels_3[k]];
				joined.push(pieces.join(''));
			}
		}
	}
	return joined;
}

var lr_hand_pose_properties = product3(pose_control_prefix, left_right, hand_pose_properties);
var lr_arm_node_names =  product2(left_right, arm_node_names);
var lr_foot_pose_properties = (
	product3(pose_control_prefix, left_right, foot_pose_properties) +
	extra_foot_pose_props
);

function lock_all(root_node, node_names, lock) {
	for (var j = 0; j < node_names.length; j++) {
		var name = node_names[j];
		var node = root_node.findNodeChild(name, true);
		if (node.getXRotControl()) {
			node.getXRotControl().lock(lock);
		}
		if (node.getYRotControl()) {
			node.getYRotControl().lock(lock);
		}
		if (node.getZRotControl()) {
			node.getZRotControl().lock(lock);
		}
	}
}

function lock_toe_twist(root_node, node_names, lock) {
	for (var j = 0; j < node_names.length; j++) {
		var name = node_names[j];
		var node = root_node.findNodeChild(name, true);
		if (node.getZRotControl()) {
			node.getZRotControl().lock(lock);
		}
	}
}

function unlock_all(root_node) {
	var property_list = root_node.getPropertyList();
	for (var i = 0; i < property_list.length; i++) {
		var prop_obj = property_list[i];
		prop_obj.lock(false);
	}
	var children = root_node.getNodeChildren(true);
	for (var i = 0; i < children.length; i++)  {
		var node = children[i];
		if (node.getXRotControl()) {
			node.getXRotControl().lock(false);
		}
		if (node.getYRotControl()) {
			node.getYRotControl().lock(false);
		}
		if (node.getZRotControl()) {
			node.getZRotControl().lock(false);
		}
	}
}

function lock_all_pose(root_node, pose_prop_names, lock) {
	property_list = root_node.getPropertyList();
	for (var i = 0; i < property_list.length; i++) {
		var prop_obj = property_list[i];
		var prop_name = prop_obj.name;
		if (pose_prop_names.indexOf(prop_name) >= 0) {
			print("Found property", prop_name);
			prop_obj.lock(lock);
		}
	}
}

function report_results(root_nodes, success_message) {
	if (root_nodes.length > 0) {
		MessageBox.information(qsTr(success_message), qsTr("Pose Lock"), qsTr("&OK") );
	} else {
		MessageBox.critical(qsTr("At least one figure must be selected."), qsTr("Pose Lock"), qsTr("&OK") );
	}
}
